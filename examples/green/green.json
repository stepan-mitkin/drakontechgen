{
    "name": "green",
    "type": "module",
    "args": {},
    "declared": {},
    "auto": {},
    "all": {
        "doWhile": "function",
        "doWhileDo": "function",
        "selectArrow": "function",
        "twoExits": "function",
        "whileDo": "function",
        "earlyExit": "function",
        "forLoopDeclare": "function",
        "forLoopNoDeclare": "function",
        "foreachLoopArray": "function",
        "foreachLoopObject": "function",
        "add": "function",
        "addCore": "function",
        "mul": "function",
        "complexAnd": "function",
        "complexOr": "function",
        "fizzBuzz": "function",
        "questionMerge": "function",
        "simpleAnd": "function",
        "simpleOr": "function",
        "forEachUntil": "function",
        "scope3": "function",
        "degenerateSelect": "function",
        "selectShortCircuit": "function",
        "selectWithDefault": "function",
        "selectWithoutDefault": "function",
        "complexSilhouette": "function",
        "fibonacci": "function",
        "empty": "function",
        "generateId": "function",
        "getSecret": "function",
        "hello": "function"
    },
    "loop": {},
    "algoprops": {},
    "functions": {
        "doWhile": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                            "type": "Identifier",
                            "name": "result"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 20,
                            "raw": "20"
                        }
                    },
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "5"
                },
                "6": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                }
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "arrow-loop",
                    "one": "6",
                    "id": "7"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ArrowLoop/doWhile.drakon",
            "name": "doWhile",
            "scope": {
                "name": "doWhile",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "doWhileDo": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "8",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                            "type": "Identifier",
                            "name": "result"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 20,
                            "raw": "20"
                        }
                    },
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "5"
                },
                "7": {
                    "type": "arrow-loop",
                    "one": "9",
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                }
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 7,
                                    "raw": "7"
                                }
                            }
                        }
                    ],
                    "id": "9"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ArrowLoop/doWhileDo.drakon",
            "name": "doWhileDo",
            "scope": {
                "name": "doWhileDo",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "selectArrow": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "5": {
                    "type": "case",
                    "one": "8",
                    "two": null,
                    "id": "5"
                },
                "6": {
                    "type": "case",
                    "one": "10",
                    "two": "11",
                    "content": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "10"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "select",
                    "one": "6",
                    "content": {
                        "type": "Identifier",
                        "name": "result"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "prefix": false
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "arrow-loop",
                    "one": "7",
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "10"
                },
                "11": {
                    "one": "12",
                    "type": "case",
                    "two": "5",
                    "content": {
                        "type": "Literal",
                        "value": 5,
                        "raw": "5"
                    },
                    "id": "11"
                },
                "12": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                }
                            }
                        }
                    ],
                    "id": "12"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ArrowLoop/selectArrow.drakon",
            "name": "selectArrow",
            "scope": {
                "name": "selectArrow",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "twoExits": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "12",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "i"
                                    },
                                    "init": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                    }
                                }
                            ],
                            "kind": "let"
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "10",
                    "two": "7",
                    "flag1": 0,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "<",
                        "left": {
                            "type": "Identifier",
                            "name": "i"
                        },
                        "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                                "type": "Identifier",
                                "name": "array"
                            },
                            "property": {
                                "type": "Identifier",
                                "name": "length"
                            }
                        }
                    },
                    "id": "4"
                },
                "7": {
                    "type": "action",
                    "one": "8",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "item"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "i"
                                    }
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "question",
                    "one": "9",
                    "two": "11",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                            "type": "Identifier",
                            "name": "item"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "value"
                        }
                    },
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "13",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "index"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "i"
                                }
                            }
                        }
                    ],
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "13",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "index"
                                },
                                "right": {
                                    "type": "UnaryExpression",
                                    "operator": "-",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "prefix": true
                                }
                            }
                        }
                    ],
                    "id": "10"
                },
                "11": {
                    "type": "action",
                    "one": "12",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "i"
                                },
                                "prefix": false
                            }
                        }
                    ],
                    "id": "11"
                },
                "12": {
                    "type": "arrow-loop",
                    "one": "3",
                    "id": "12"
                },
                "13": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "index"
                            }
                        }
                    ],
                    "id": "13"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array\nvalue",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ArrowLoop/twoExits.drakon",
            "name": "twoExits",
            "scope": {
                "name": "twoExits",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array",
                "value"
            ]
        },
        "whileDo": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "8",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                            "type": "Identifier",
                            "name": "result"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 20,
                            "raw": "20"
                        }
                    },
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "5"
                },
                "7": {
                    "type": "arrow-loop",
                    "one": "4",
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 3,
                                    "raw": "3"
                                }
                            }
                        }
                    ],
                    "id": "8"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ArrowLoop/whileDo.drakon",
            "name": "whileDo",
            "scope": {
                "name": "whileDo",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "earlyExit": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "splice"
                                    }
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "index"
                                    },
                                    {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "loopend",
                    "one": "9",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "6",
                    "content": {
                        "type": "ForStatement",
                        "init": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                            }
                        },
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "array"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                }
                            }
                        },
                        "update": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "prefix": false
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "5"
                },
                "6": {
                    "type": "question",
                    "one": "4",
                    "two": "8",
                    "flag1": 0,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                                "type": "Identifier",
                                "name": "item"
                            },
                            "property": {
                                "type": "Identifier",
                                "name": "i"
                            }
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "value"
                        }
                    },
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "index"
                                },
                                "right": {
                                    "type": "UnaryExpression",
                                    "operator": "-",
                                    "argument": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    },
                                    "prefix": true
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "index"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "i"
                                }
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "question",
                    "one": "3",
                    "two": "1",
                    "flag1": 0,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                            "type": "Identifier",
                            "name": "index"
                        },
                        "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                            },
                            "prefix": true
                        }
                    },
                    "id": "9"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array\nvalue",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ForLoop/earlyExit.drakon",
            "name": "earlyExit",
            "scope": {
                "name": "earlyExit",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array",
                "value"
            ]
        },
        "forLoopDeclare": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "copy"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "loopend",
                    "one": "3",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "8",
                    "content": {
                        "type": "ForStatement",
                        "init": {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "i"
                                    },
                                    "init": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                    }
                                }
                            ],
                            "kind": "var"
                        },
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "array"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                }
                            }
                        },
                        "update": {
                            "type": "AssignmentExpression",
                            "operator": "+=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "5"
                },
                "6": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "copy"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                    }
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                }
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "copy"
                                },
                                "right": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "key"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "i"
                                    }
                                }
                            }
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "value"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "i"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    }
                                }
                            }
                        }
                    ],
                    "id": "8"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ForLoop/forLoopDeclare.drakon",
            "name": "forLoopDeclare",
            "scope": {
                "name": "forLoopDeclare",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array"
            ]
        },
        "forLoopNoDeclare": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "copy"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "loopend",
                    "one": "3",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "8",
                    "content": {
                        "type": "ForStatement",
                        "init": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                            }
                        },
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                    "type": "Identifier",
                                    "name": "array"
                                },
                                "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                }
                            }
                        },
                        "update": {
                            "type": "AssignmentExpression",
                            "operator": "+=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "5"
                },
                "6": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "copy"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                    }
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                }
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "copy"
                                },
                                "right": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "key"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "i"
                                    }
                                }
                            }
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "value"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                            "type": "Identifier",
                                            "name": "i"
                                        },
                                        "right": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                        }
                                    }
                                }
                            }
                        }
                    ],
                    "id": "8"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ForLoop/forLoopNoDeclare.drakon",
            "name": "forLoopNoDeclare",
            "scope": {
                "name": "forLoopNoDeclare",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array"
            ]
        },
        "foreachLoopArray": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "copy"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "loopend",
                    "one": "3",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "8",
                    "content": {
                        "type": "ForOfStatement",
                        "left": {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "item"
                                    },
                                    "init": null
                                }
                            ],
                            "kind": "var"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "array"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "5",
                    "subtype": "array",
                    "variable": "item"
                },
                "6": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "copy"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                    }
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "value2"
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "copy"
                                },
                                "right": {
                                    "type": "ArrayExpression",
                                    "elements": []
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "value2"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "item"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "value"
                                    }
                                }
                            }
                        }
                    ],
                    "id": "8"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array\nvalue",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ForLoop/foreachLoopArray.drakon",
            "name": "foreachLoopArray",
            "scope": {
                "name": "foreachLoopArray",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array",
                "value"
            ]
        },
        "foreachLoopObject": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "copy"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "loopend",
                    "one": "3",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "_item__4",
                    "content": {
                        "type": "ForInStatement",
                        "left": {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "key"
                                    },
                                    "init": null
                                }
                            ],
                            "kind": "var"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "_collection_2"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        },
                        "each": false
                    },
                    "id": "5",
                    "subtype": "dictionary",
                    "keyVariable": "key",
                    "valueVariable": "item"
                },
                "6": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "copy"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                    }
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "value2"
                                }
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "copy"
                                },
                                "right": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "value2"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "item"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "value"
                                    }
                                }
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "_item__3",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "wrapper"
                                },
                                "right": {
                                    "type": "ObjectExpression",
                                    "properties": [
                                        {
                                            "type": "Property",
                                            "key": {
                                                "type": "Identifier",
                                                "name": "collection"
                                            },
                                            "computed": false,
                                            "value": {
                                                "type": "Identifier",
                                                "name": "object"
                                            },
                                            "kind": "init",
                                            "method": false,
                                            "shorthand": false
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "id": "9"
                },
                "_item__3": {
                    "id": "_item__3",
                    "type": "action",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_collection_2"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "wrapper"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "collection"
                                    }
                                }
                            }
                        }
                    ],
                    "one": "5"
                },
                "_item__4": {
                    "id": "_item__4",
                    "type": "action",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "item"
                                },
                                "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "_collection_2"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                    }
                                }
                            }
                        }
                    ],
                    "one": "8"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "object\nvalue",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/ForLoop/foreachLoopObject.drakon",
            "name": "foreachLoopObject",
            "scope": {
                "name": "foreachLoopObject",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "object",
                "value"
            ]
        },
        "add": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "addCore"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "left"
                                        },
                                        {
                                            "type": "Identifier",
                                            "name": "right"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "4"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "left\nright",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Math/add.drakon",
            "name": "add",
            "scope": {
                "name": "add",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "left",
                "right"
            ]
        },
        "addCore": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                    "type": "Identifier",
                                    "name": "left"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "right"
                                }
                            }
                        }
                    ],
                    "id": "3"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": false,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "left\nright",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Math/addCore.drakon",
            "name": "addCore",
            "scope": {
                "name": "addCore",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "left",
                "right"
            ]
        },
        "mul": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "multiply"
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "left"
                                    },
                                    {
                                        "type": "Identifier",
                                        "name": "right"
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "3"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "left\nright",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Math/mul.drakon",
            "name": "mul",
            "scope": {
                "name": "mul",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "left",
                "right"
            ]
        },
        "complexAnd": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "8",
                    "flag1": 0,
                    "content": {
                        "type": "Identifier",
                        "name": "valueA"
                    },
                    "id": "4"
                },
                "5": {
                    "type": "question",
                    "one": "3",
                    "two": "8",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueB"
                    },
                    "id": "5"
                },
                "8": {
                    "type": "question",
                    "one": "3",
                    "two": "9",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueC"
                    },
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                            }
                        }
                    ],
                    "id": "9"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "valueA\nvalueB\nvalueC",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/complexAnd.drakon",
            "name": "complexAnd",
            "scope": {
                "name": "complexAnd",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "valueA",
                "valueB",
                "valueC"
            ]
        },
        "complexOr": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "3",
                    "two": "8",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueA"
                    },
                    "id": "4"
                },
                "8": {
                    "type": "question",
                    "one": "11",
                    "two": "12",
                    "flag1": 0,
                    "content": {
                        "type": "Identifier",
                        "name": "valueB"
                    },
                    "id": "8"
                },
                "11": {
                    "type": "question",
                    "one": "3",
                    "two": "12",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueC"
                    },
                    "id": "11"
                },
                "12": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                            }
                        }
                    ],
                    "id": "12"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "valueA\nvalueB\nvalueC",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/complexOr.drakon",
            "name": "complexOr",
            "scope": {
                "name": "complexOr",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "valueA",
                "valueB",
                "valueC"
            ]
        },
        "fizzBuzz": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "FizzBuzz",
                                "raw": "'FizzBuzz'"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "%",
                        "left": {
                            "type": "Identifier",
                            "name": "number"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 3,
                            "raw": "3"
                        }
                    },
                    "id": "4"
                },
                "5": {
                    "type": "question",
                    "one": "3",
                    "two": "6",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "%",
                        "left": {
                            "type": "Identifier",
                            "name": "number"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 5,
                            "raw": "5"
                        }
                    },
                    "id": "5"
                },
                "6": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "Fizz",
                                "raw": "'Fizz'"
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "question",
                    "one": "8",
                    "two": "9",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "%",
                        "left": {
                            "type": "Identifier",
                            "name": "number"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 5,
                            "raw": "5"
                        }
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "Buzz",
                                "raw": "'Buzz'"
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "undefined"
                            }
                        }
                    ],
                    "id": "9"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "number",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/fizzBuzz.drakon",
            "name": "fizzBuzz",
            "scope": {
                "name": "fizzBuzz",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "number"
            ]
        },
        "questionMerge": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "8",
                    "two": "5",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "left"
                    },
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "prefix": false
                            }
                        }
                    ],
                    "id": "5"
                },
                "6": {
                    "type": "question",
                    "one": "8",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "right"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 5,
                                    "raw": "5"
                                }
                            }
                        }
                    ],
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "9",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 10,
                                    "raw": "10"
                                }
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "9"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "left\nright",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/questionMerge.drakon",
            "name": "questionMerge",
            "scope": {
                "name": "questionMerge",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "left",
                "right"
            ]
        },
        "simpleAnd": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "5",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueA"
                    },
                    "id": "4"
                },
                "5": {
                    "type": "question",
                    "one": "6",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueB"
                    },
                    "id": "5"
                },
                "6": {
                    "type": "question",
                    "one": "3",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueC"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                            }
                        }
                    ],
                    "id": "7"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "valueA\nvalueB\nvalueC",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/simpleAnd.drakon",
            "name": "simpleAnd",
            "scope": {
                "name": "simpleAnd",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "valueA",
                "valueB",
                "valueC"
            ]
        },
        "simpleOr": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "question",
                    "one": "3",
                    "two": "8",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueA"
                    },
                    "id": "4"
                },
                "8": {
                    "type": "question",
                    "one": "3",
                    "two": "9",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueB"
                    },
                    "id": "8"
                },
                "9": {
                    "type": "question",
                    "one": "3",
                    "two": "10",
                    "flag1": 1,
                    "content": {
                        "type": "Identifier",
                        "name": "valueC"
                    },
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                            }
                        }
                    ],
                    "id": "10"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "valueA\nvalueB\nvalueC",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Question/simpleOr.drakon",
            "name": "simpleOr",
            "scope": {
                "name": "simpleOr",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "valueA",
                "valueB",
                "valueC"
            ]
        },
        "forEachUntil": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "5",
                    "id": "2"
                },
                "4": {
                    "type": "loopend",
                    "one": "1",
                    "content": "",
                    "id": "4"
                },
                "5": {
                    "type": "loopbegin",
                    "one": "6",
                    "content": {
                        "type": "ForOfStatement",
                        "left": {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "element"
                                    },
                                    "init": null
                                }
                            ],
                            "kind": "var"
                        },
                        "right": {
                            "type": "Identifier",
                            "name": "array"
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "5",
                    "subtype": "array",
                    "variable": "element"
                },
                "6": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "mustExit"
                                },
                                "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                        "type": "Identifier",
                                        "name": "action"
                                    },
                                    "arguments": [
                                        {
                                            "type": "Identifier",
                                            "name": "element"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "id": "6"
                },
                "7": {
                    "type": "question",
                    "one": "4",
                    "two": "1",
                    "flag1": 0,
                    "content": {
                        "type": "Identifier",
                        "name": "mustExit"
                    },
                    "id": "7"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": false,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array\naction",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Scope/forEachUntil.drakon",
            "name": "forEachUntil",
            "scope": {
                "name": "forEachUntil",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array",
                "action"
            ]
        },
        "scope3": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "4",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "sort"
                                    }
                                },
                                "arguments": [
                                    {
                                        "type": "ArrowFunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "a"
                                            },
                                            {
                                                "type": "Identifier",
                                                "name": "b"
                                            }
                                        ],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "left"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "a"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "sortProp"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "right"
                                                        },
                                                        "right": {
                                                            "type": "MemberExpression",
                                                            "computed": true,
                                                            "object": {
                                                                "type": "Identifier",
                                                                "name": "b"
                                                            },
                                                            "property": {
                                                                "type": "Identifier",
                                                                "name": "sortProp"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": "<",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "left"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "right"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "UnaryExpression",
                                                                    "operator": "-",
                                                                    "argument": {
                                                                        "type": "Literal",
                                                                        "value": 1,
                                                                        "raw": "1"
                                                                    },
                                                                    "prefix": true
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "left"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "right"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": 1,
                                                                    "raw": "1"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": 0,
                                                        "raw": "0"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "action",
                    "one": "3",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                }
                            }
                        },
                        {
                            "type": "VariableDeclaration",
                            "declarations": [
                                {
                                    "type": "VariableDeclarator",
                                    "id": {
                                        "type": "Identifier",
                                        "name": "found"
                                    },
                                    "init": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                    }
                                }
                            ],
                            "kind": "var"
                        }
                    ],
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "Identifier",
                                    "name": "forEachUntil"
                                },
                                "arguments": [
                                    {
                                        "type": "Identifier",
                                        "name": "array"
                                    },
                                    {
                                        "type": "FunctionExpression",
                                        "id": null,
                                        "params": [
                                            {
                                                "type": "Identifier",
                                                "name": "element"
                                            }
                                        ],
                                        "body": {
                                            "type": "BlockStatement",
                                            "body": [
                                                {
                                                    "type": "ExpressionStatement",
                                                    "expression": {
                                                        "type": "AssignmentExpression",
                                                        "operator": "=",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "e2"
                                                        },
                                                        "right": {
                                                            "type": "BinaryExpression",
                                                            "operator": "*",
                                                            "left": {
                                                                "type": "Identifier",
                                                                "name": "element"
                                                            },
                                                            "right": {
                                                                "type": "Literal",
                                                                "value": 2,
                                                                "raw": "2"
                                                            }
                                                        }
                                                    }
                                                },
                                                {
                                                    "type": "IfStatement",
                                                    "test": {
                                                        "type": "BinaryExpression",
                                                        "operator": ">",
                                                        "left": {
                                                            "type": "Identifier",
                                                            "name": "e2"
                                                        },
                                                        "right": {
                                                            "type": "Identifier",
                                                            "name": "cutoff"
                                                        }
                                                    },
                                                    "consequent": {
                                                        "type": "BlockStatement",
                                                        "body": [
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "result"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "e2"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ExpressionStatement",
                                                                "expression": {
                                                                    "type": "AssignmentExpression",
                                                                    "operator": "=",
                                                                    "left": {
                                                                        "type": "Identifier",
                                                                        "name": "found"
                                                                    },
                                                                    "right": {
                                                                        "type": "Identifier",
                                                                        "name": "element"
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "type": "ReturnStatement",
                                                                "argument": {
                                                                    "type": "Literal",
                                                                    "value": true,
                                                                    "raw": "true"
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    "alternate": null
                                                },
                                                {
                                                    "type": "ReturnStatement",
                                                    "argument": {
                                                        "type": "Literal",
                                                        "value": false,
                                                        "raw": "false"
                                                    }
                                                }
                                            ]
                                        },
                                        "generator": false,
                                        "expression": false,
                                        "async": false
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "5"
                },
                "6": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "ObjectExpression",
                                "properties": [
                                    {
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "result"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "Identifier",
                                            "name": "result"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": true
                                    },
                                    {
                                        "type": "Property",
                                        "key": {
                                            "type": "Identifier",
                                            "name": "found"
                                        },
                                        "computed": false,
                                        "value": {
                                            "type": "Identifier",
                                            "name": "found"
                                        },
                                        "kind": "init",
                                        "method": false,
                                        "shorthand": true
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "6"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "array\nsortProp\ncutoff",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Scope/scope3.drakon",
            "name": "scope3",
            "scope": {
                "name": "scope3",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "array",
                "sortProp",
                "cutoff"
            ]
        },
        "degenerateSelect": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "ten",
                                "raw": "\"ten\""
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "case",
                    "one": "8",
                    "id": "4"
                },
                "6": {
                    "type": "case",
                    "one": "3",
                    "two": "4",
                    "content": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "10"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "select",
                    "one": "6",
                    "content": {
                        "type": "Identifier",
                        "name": "value"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "other",
                                "raw": "\"other\""
                            }
                        }
                    ],
                    "id": "8"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "value",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Select/degenerateSelect.drakon",
            "name": "degenerateSelect",
            "scope": {
                "name": "degenerateSelect",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "value"
            ]
        },
        "selectShortCircuit": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "_item__6",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "good",
                                "raw": "\"good\""
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "case",
                    "one": "8",
                    "content": {
                        "type": "Literal",
                        "value": 30,
                        "raw": "30"
                    },
                    "id": "4"
                },
                "6": {
                    "type": "case",
                    "one": "3",
                    "two": "9",
                    "content": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "10"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "select",
                    "one": "6",
                    "content": {
                        "type": "Identifier",
                        "name": "_selectValue_5"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "bad",
                                "raw": "\"bad\""
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "one": "3",
                    "type": "case",
                    "two": "4",
                    "content": {
                        "type": "Literal",
                        "value": 20,
                        "raw": "20"
                    },
                    "id": "9"
                },
                "_item__6": {
                    "id": "_item__6",
                    "type": "action",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_selectValue_5"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "value"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 5,
                                        "raw": "5"
                                    }
                                }
                            }
                        }
                    ],
                    "one": "7"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "value",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Select/selectShortCircuit.drakon",
            "name": "selectShortCircuit",
            "scope": {
                "name": "selectShortCircuit",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "value"
            ]
        },
        "selectWithDefault": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "7",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "ten",
                                "raw": "\"ten\""
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "case",
                    "one": "8",
                    "id": "4"
                },
                "6": {
                    "type": "case",
                    "one": "3",
                    "two": "9",
                    "content": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "10"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "select",
                    "one": "6",
                    "content": {
                        "type": "Identifier",
                        "name": "value"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "other",
                                "raw": "\"other\""
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "one": "10",
                    "type": "case",
                    "two": "4",
                    "content": {
                        "type": "Literal",
                        "value": 20,
                        "raw": "20"
                    },
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "twenty",
                                "raw": "\"twenty\""
                            }
                        }
                    ],
                    "id": "10"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "value",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Select/selectWithDefault.drakon",
            "name": "selectWithDefault",
            "scope": {
                "name": "selectWithDefault",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "value"
            ]
        },
        "selectWithoutDefault": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "_item__8",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "ten",
                                "raw": "\"ten\""
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "case",
                    "one": "8",
                    "content": {
                        "type": "Literal",
                        "value": 30,
                        "raw": "30"
                    },
                    "id": "4"
                },
                "6": {
                    "type": "case",
                    "one": "3",
                    "two": "9",
                    "content": {
                        "type": "Literal",
                        "value": 10,
                        "raw": "10"
                    },
                    "id": "6"
                },
                "7": {
                    "type": "select",
                    "one": "6",
                    "content": {
                        "type": "Identifier",
                        "name": "_selectValue_7"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "thirty",
                                "raw": "\"thirty\""
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "one": "10",
                    "type": "case",
                    "two": "4",
                    "content": {
                        "type": "Literal",
                        "value": 20,
                        "raw": "20"
                    },
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Literal",
                                "value": "twenty",
                                "raw": "\"twenty\""
                            }
                        }
                    ],
                    "id": "10"
                },
                "_item__8": {
                    "id": "_item__8",
                    "type": "action",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "_selectValue_7"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "value"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 5,
                                        "raw": "5"
                                    }
                                }
                            }
                        }
                    ],
                    "one": "7"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "value",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Select/selectWithoutDefault.drakon",
            "name": "selectWithoutDefault",
            "scope": {
                "name": "selectWithoutDefault",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "value"
            ]
        },
        "complexSilhouette": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 1,
                    "one": "8",
                    "content": "First",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "5",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "right"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "branch",
                    "one": "9",
                    "branchId": 4,
                    "content": "Exit",
                    "id": "4"
                },
                "5": {
                    "type": "branch",
                    "one": "10",
                    "branchId": 2,
                    "content": "Second",
                    "id": "5"
                },
                "6": {
                    "type": "question",
                    "one": "3",
                    "two": "7",
                    "flag1": 1,
                    "content": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                            "type": "Identifier",
                            "name": "left"
                        },
                        "right": {
                            "type": "Literal",
                            "value": 3,
                            "raw": "3"
                        }
                    },
                    "id": "6"
                },
                "7": {
                    "type": "branch",
                    "branchId": 3,
                    "one": "11",
                    "content": "Third",
                    "id": "7"
                },
                "8": {
                    "type": "action",
                    "one": "6",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        }
                    ],
                    "id": "8"
                },
                "9": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "7",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 2,
                                    "raw": "2"
                                }
                            }
                        }
                    ],
                    "id": "10"
                },
                "11": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "+=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 10,
                                    "raw": "10"
                                }
                            }
                        }
                    ],
                    "id": "11"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "left  \n\n right",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Silhouette/complexSilhouette.drakon",
            "name": "complexSilhouette",
            "scope": {
                "name": "complexSilhouette",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "left",
                "right"
            ]
        },
        "fibonacci": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 1,
                    "one": "9",
                    "content": "Simple case",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "ordinal"
                                }
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "branch",
                    "one": "10",
                    "branchId": 3,
                    "content": "Exit",
                    "id": "4"
                },
                "5": {
                    "type": "branch",
                    "one": "13",
                    "branchId": 2,
                    "content": "Normal case",
                    "id": "5"
                },
                "6": {
                    "type": "case",
                    "one": "5",
                    "id": "6"
                },
                "7": {
                    "type": "case",
                    "one": "3",
                    "two": "6",
                    "content": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                    },
                    "id": "7"
                },
                "8": {
                    "type": "case",
                    "one": "3",
                    "two": "7",
                    "content": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                    },
                    "id": "8"
                },
                "9": {
                    "type": "select",
                    "one": "8",
                    "content": {
                        "type": "Identifier",
                        "name": "ordinal"
                    },
                    "id": "9"
                },
                "10": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "result"
                            }
                        }
                    ],
                    "id": "10"
                },
                "11": {
                    "type": "loopend",
                    "one": "4",
                    "content": "",
                    "id": "11"
                },
                "12": {
                    "type": "loopbegin",
                    "one": "14",
                    "content": {
                        "type": "ForStatement",
                        "init": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                            }
                        },
                        "test": {
                            "type": "BinaryExpression",
                            "operator": "<=",
                            "left": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "right": {
                                "type": "Identifier",
                                "name": "ordinal"
                            }
                        },
                        "update": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                                "type": "Identifier",
                                "name": "i"
                            },
                            "prefix": false
                        },
                        "body": {
                            "type": "BlockStatement",
                            "body": []
                        }
                    },
                    "id": "12"
                },
                "13": {
                    "type": "action",
                    "one": "12",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "i_2"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                }
                            }
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "i_1"
                                },
                                "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                }
                            }
                        }
                    ],
                    "id": "13"
                },
                "14": {
                    "type": "action",
                    "one": "16",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "i_2"
                                    },
                                    "right": {
                                        "type": "Identifier",
                                        "name": "i_1"
                                    }
                                }
                            }
                        }
                    ],
                    "id": "14"
                },
                "16": {
                    "type": "action",
                    "one": "11",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "i_2"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "i_1"
                                }
                            }
                        },
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "i_1"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "result"
                                }
                            }
                        }
                    ],
                    "id": "16"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "ordinal",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/Silhouette/fibonacci.drakon",
            "name": "fibonacci",
            "scope": {
                "name": "fibonacci",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {
                    "[object Object]": true
                },
                "auto": {},
                "all": {
                    "[object Object]": "declared"
                },
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": [
                "ordinal"
            ]
        },
        "empty": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "1",
                    "id": "2"
                }
            },
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "type": "drakon",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/empty.drakon",
            "name": "empty",
            "scope": {
                "name": "empty",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "generateId": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "5",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "id"
                            }
                        }
                    ],
                    "id": "3"
                },
                "4": {
                    "type": "action",
                    "one": "3",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "nextId"
                                },
                                "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                        "type": "Identifier",
                                        "name": "nextId"
                                    },
                                    "right": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                    }
                                }
                            }
                        }
                    ],
                    "id": "4"
                },
                "5": {
                    "type": "action",
                    "one": "4",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                    "type": "Identifier",
                                    "name": "id"
                                },
                                "right": {
                                    "type": "Identifier",
                                    "name": "nextId"
                                }
                            }
                        }
                    ],
                    "id": "5"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/generateId.drakon",
            "name": "generateId",
            "scope": {
                "name": "generateId",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "getSecret": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ReturnStatement",
                            "argument": {
                                "type": "Identifier",
                                "name": "secretValue"
                            }
                        }
                    ],
                    "id": "3"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/getSecret.drakon",
            "name": "getSecret",
            "scope": {
                "name": "getSecret",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        },
        "hello": {
            "items": {
                "1": {
                    "type": "end",
                    "id": "1"
                },
                "2": {
                    "type": "branch",
                    "branchId": 0,
                    "one": "3",
                    "id": "2"
                },
                "3": {
                    "type": "action",
                    "one": "1",
                    "content": [
                        {
                            "type": "ExpressionStatement",
                            "expression": {
                                "type": "CallExpression",
                                "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                        "type": "Identifier",
                                        "name": "console"
                                    },
                                    "property": {
                                        "type": "Identifier",
                                        "name": "log"
                                    }
                                },
                                "arguments": [
                                    {
                                        "type": "Literal",
                                        "value": "Hello, world",
                                        "raw": "\"Hello, world\""
                                    }
                                ]
                            }
                        }
                    ],
                    "id": "3"
                }
            },
            "type": "drakon",
            "keywords": {
                "export": true,
                "function": true,
                "scenario": false,
                "async": false,
                "algoprop": false
            },
            "params": "",
            "path": "/Users/stipan/Documents/drakontechgen/examples/green/hello.drakon",
            "name": "hello",
            "scope": {
                "name": "hello",
                "type": "function",
                "parent": "green",
                "args": {},
                "declared": {},
                "auto": {},
                "all": {},
                "loop": {},
                "algoprops": {},
                "functions": {},
                "classes": {},
                "assignments": {}
            },
            "arguments": []
        }
    },
    "classes": {},
    "assignments": {}
}